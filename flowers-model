import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
import numpy as np
import pandas as pd
import os
import random
import pathlib
import cv2
from sklearn.model_selection import train_test_split

# Descargar y preparar el dataset
dataset = "https://storage.googleapis.com/download.tensorflow.org/example_images/flower_photos.tgz"
directory = tf.keras.utils.get_file('flower_photos', origin=dataset, untar=True)
directory = directory + '/flower_photos'
data = pathlib.Path(directory)
folders = os.listdir(data)

# Preprocesamiento de im√°genes
image_names = []
train_labels = []
train_images = []
size = (64, 64)
folders.remove("LICENSE.txt")

for folder in folders:
    for file in os.listdir(os.path.join(data, folder)):
        if file.endswith("jpg"):
            img = cv2.imread(os.path.join(data, folder, file))
            img = cv2.resize(img, size)
            train_images.append(img)
            train_labels.append(folder)

# Convertir a numpy array
train_images = np.array(train_images, dtype=np.float32) / 255.0
train_labels = pd.get_dummies(train_labels).values.argmax(1)

# Dividir datos en entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(train_images, train_labels, test_size=0.2, random_state=42)

# Definir la red neuronal convolucional (CNN)
model = keras.Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(64,64,3)),
    MaxPooling2D((2,2)),
    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D((2,2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(5, activation='softmax')
])

# Compilar el modelo
model.compile(optimizer=Adam(learning_rate=0.001),
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Entrenar el modelo
model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test))

# Model Inference
# Preprocess the sample image
img_height = 64
img_width = 64

# Load and preprocess an example image
image = cv2.imread('/root/.keras/datasets/flower_photos/flower_photos/sunflowers/1008566138_6927679c8a.jpg')
image_resized = cv2.resize(image, (img_height, img_width))
image = np.expand_dims(image_resized, axis=0)

print(image)
print(image.shape)

# Make predictions
image_pred = model.predict(image)

print(image_pred)
# Produce a human-readable output label
classes_labels = pd.unique(train_labels)

image_output_class = classes_labels[np.argmax(image_pred)]
print(classes_labels)
print(np.argmax(image_pred))

print("The predicted class is", image_output_class)
